const express = require('express');
const axios = require('axios');
const path = require('path');
const session = require('express-session');
const { URL } = require('url');
const cheerio = require('cheerio');
const MongoStore = require('connect-mongo'); // Impor connect-mongo

const app = express();
const PORT = process.env.PORT || 3000;

// Konfigurasi MongoDB Connection URL
// Pastikan MONGODB_URI diatur di environment Railway Anda
const mongoUrl = process.env.MONGODB_URI || 'mongodb+srv://zanssxploit:pISqUYgJJDfnLW9b@cluster0.fgram.mongodb.net/daf_db?retryWrites=true&w=majority';
if (!process.env.MONGODB_URI && process.env.NODE_ENV === 'production') {
    console.warn("PERINGATAN: MONGODB_URI tidak diatur untuk lingkungan produksi!");
}

// Inisialisasi MongoStore
const mongoSessionStore = MongoStore.create({
    mongoUrl: mongoUrl,
    collectionName: 'sessions', // Nama koleksi untuk menyimpan sesi
    ttl: 60 * 60 * 24, // 24 jam dalam detik
    autoRemove: 'native' // Gunakan fitur TTL bawaan MongoDB untuk menghapus sesi yang kedaluwarsa
});

app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

app.use(express.static(path.join(__dirname, 'public')));
app.use(express.urlencoded({ extended: true }));
app.use(express.json());

app.use(session({
    store: mongoSessionStore, // Gunakan MongoStore
    secret: process.env.SESSION_SECRET || 'FALLBACK_SECRET_MONGO_WFC_CHANGE_ME_ASAP', // Ganti dan set di env
    resave: false,
    saveUninitialized: false,
    cookie: {
        secure: process.env.NODE_ENV === 'production',
        httpOnly: true,
        maxAge: 60 * 60 * 24 * 1000, // 24 jam
        sameSite: 'lax'
    }
}));

// ... (sisa kode server.js Anda dari helper functions sampai akhir tetap sama) ...
// Fungsi Helper TikTok (TikWM API)
async function tikwmFetch(url) { /* ... kode Anda ... */ }
const SPOTIFY_API_BASE = 'https://spotifyapi.caliphdev.com';
function isValidSpotifyTrackUrl(url) { /* ... kode Anda ... */ }
async function spotifyFetchTrackInfo(trackUrl) { /* ... kode Anda ... */ }
async function spotifySearchTracks(query) { /* ... kode Anda ... */ }
async function igFbDownloader(url) { /* ... kode Anda ... */ }
async function youtubeDownloader(url, quality = '720') { /* ... kode Anda ... */ }

app.get('/', (req, res) => res.render('index', { pageTitle: 'TikTok Video/Foto', navTitle: 'TikTok', tagline: 'Unduh Video & Foto TikTok Tanpa Watermark!' }));
app.get('/tiktok-slide', (req, res) => res.render('tiktok-slide', { pageTitle: 'TikTok Slide', navTitle: 'TikTok Slide', tagline: 'Unduh Semua Gambar dari TikTok Slide!' }));

app.get('/instagram', (req, res) => {
    if (!req.session) return res.status(500).send("Session error.");
    res.render('instagram', { pageTitle: 'Instagram Downloader', navTitle: 'Instagram', tagline: 'Unduh Video & Foto Instagram!', error: req.session.igError, lastUrl: req.session.lastIgUrl });
    delete req.session.igError; delete req.session.lastIgUrl;
});

app.get('/youtube', (req, res) => {
    if (!req.session) return res.status(500).send("Session error.");
    res.render('youtube', { pageTitle: 'YouTube Downloader', navTitle: 'YouTube', tagline: 'Unduh Video YouTube dengan Kualitas Pilihan!', error: req.session.ytError, lastUrl: req.session.lastYtUrl });
    delete req.session.ytError; delete req.session.lastYtUrl;
});

app.get('/spotify', (req, res) => {
    if (!req.session) return res.status(500).send("Session error.");
    const data = { spotifyTrackInfo: req.session.spotifyTrackInfo, spotifySearchResults: req.session.spotifySearchResults, spotifyError: req.session.spotifyError, lastSpotifyQuery: req.session.lastSpotifyQuery };
    delete req.session.spotifyTrackInfo; delete req.session.spotifySearchResults; delete req.session.spotifyError; delete req.session.lastSpotifyQuery;
    res.render('spotify', {
        pageTitle: 'Spotify Downloader', navTitle: 'Spotify', tagline: 'Cari & Unduh Lagu Favoritmu dari Spotify!',
        spotifyTrackInfo: data.spotifyTrackInfo, spotifySearchResults: data.spotifySearchResults,
        spotifyError: data.spotifyError, lastQuery: data.lastSpotifyQuery || ''
    });
});

app.get('/stream/spotify', async (req, res) => {
    const trackUrl = req.query.url;
    if (!trackUrl || !isValidSpotifyTrackUrl(trackUrl)) return res.status(400).send('URL Spotify tidak valid.');
    try {
        const response = await axios.get(`${SPOTIFY_API_BASE}/api/download/track`, {
            params: { url: trackUrl }, responseType: 'stream', timeout: 45000
        });
        res.setHeader('Content-Type', 'audio/mpeg');
        if (req.query.title && req.query.artist) {
            const filename = `${req.query.title.replace(/[^a-zA-Z0-9_]+/g, '_')} - ${req.query.artist.replace(/[^a-zA-Z0-9_]+/g, '_')}.mp3`;
            res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
        }
        response.data.pipe(res);
        response.data.on('error', (e) => { if (!res.headersSent) res.status(500).send('Stream error.');});
    } catch (e) {
        console.error("Spotify Stream Error:", e.message);
        if (!res.headersSent) res.status(e.response?.status || 500).send(`Stream Gagal: ${e.message}`);
    }
});

app.post('/download/tiktok', async (req, res) => {
    if (!req.session) return res.status(500).redirect('/');
    const { url } = req.body;
    req.session.downloaderType = 'tiktok';
    if (!url || !/tiktok\.com/i.test(url)) {
        req.session.downloadError = 'URL TikTok tidak valid.';
        return res.redirect('/result');
    }
    try {
        req.session.downloadResult = await tikwmFetch(url);
        req.session.downloadError = null;
    } catch (e) {
        req.session.downloadResult = null;
        req.session.downloadError = e.message;
    }
    res.redirect('/result');
});

app.post('/download/instagram', async (req, res) => {
    if (!req.session) return res.status(500).redirect('/');
    const { url } = req.body;
    req.session.lastIgUrl = url;
    req.session.downloaderType = url.includes('instagram.com') ? 'instagram' : 'facebook';

    if (!url || (!/instagram\.com/i.test(url) && !/facebook\.com|fb\.watch/i.test(url))) {
        req.session.downloadError = 'URL Instagram atau Facebook tidak valid.';
        return res.redirect('/result');
    }
    try {
        const result = await igFbDownloader(url);
        req.session.downloadResult = result;
        req.session.downloaderType = result.platform;
        req.session.downloadError = result.error;
    } catch (error) {
        req.session.downloadResult = null;
        req.session.downloadError = error.message;
    }
    res.redirect('/result');
});

app.post('/download/youtube', async (req, res) => {
    if (!req.session) return res.status(500).redirect('/');
    const { url, quality } = req.body;
    req.session.lastYtUrl = url;
    req.session.downloaderType = 'youtube';

    if (!url || !/youtube\.com|youtu\.be/i.test(url)) {
        req.session.downloadError = 'URL YouTube tidak valid.';
        return res.redirect('/result');
    }
    try {
        req.session.downloadResult = await youtubeDownloader(url, quality || '720');
        req.session.downloadError = null;
    } catch (error) {
        req.session.downloadResult = null;
        req.session.downloadError = error.message;
    }
    res.redirect('/result');
});

app.post('/download/spotify', async (req, res) => {
    if (!req.session) return res.status(500).redirect('/');
    const query = req.body.query ? req.body.query.trim() : '';
    req.session.lastSpotifyQuery = query;

    if (!query) {
        req.session.spotifyError = 'Masukkan Link atau Judul Lagu.';
        return res.redirect('/spotify');
    }
    try {
        if (isValidSpotifyTrackUrl(query)) {
            const ti = await spotifyFetchTrackInfo(query);
            req.session.spotifyTrackInfo = {
                title: ti.title, artist: Array.isArray(ti.artists) ? ti.artists.join(', ') : (ti.artist || ti.artists || 'N/A'),
                album: ti.album || 'N/A', thumbnail: ti.thumbnail || ti.cover, url: query, duration: ti.duration || 'N/A',
                streamUrl: `/stream/spotify?url=${encodeURIComponent(query)}&title=${encodeURIComponent(ti.title || 'track')}&artist=${encodeURIComponent(Array.isArray(ti.artists) ? ti.artists.join(', ') : (ti.artist || 'N/A'))}`
            };
            req.session.spotifySearchResults = null; req.session.spotifyError = null;
        } else {
            const sr = await spotifySearchTracks(query);
            if (sr.length === 0) {
                req.session.spotifyError = `Tidak ada hasil untuk "${query}".`;
                req.session.spotifySearchResults = [];
            } else {
                req.session.spotifySearchResults = sr.map(t => ({
                    title: t.title, artist: Array.isArray(t.artists) ? t.artists.join(', ') : (t.artist || t.artists || 'N/A'),
                    thumbnail: t.thumbnail || t.cover, url: t.url
                })).slice(0, 10);
                req.session.spotifyError = null;
            }
            req.session.spotifyTrackInfo = null;
        }
    } catch (e) {
        req.session.spotifyError = e.message;
        req.session.spotifyTrackInfo = null;
        req.session.spotifySearchResults = null;
    }
    res.redirect('/spotify');
});

app.get('/result', (req, res) => {
    if (!req.session) return res.status(500).send("Session error.");
    const data = { downloadResult: req.session.downloadResult, downloadError: req.session.downloadError, downloaderType: req.session.downloaderType };
    delete req.session.downloadResult; delete req.session.downloadError; delete req.session.downloaderType;
    res.render('result', {
        pageTitle: data.downloadError ? 'Kesalahan' : 'Hasil Unduhan', navTitle: 'Hasil',
        results: data.downloadResult, error: data.downloadError, type: data.downloaderType || 'unknown'
    });
});

app.use((req, res) => res.status(404).render('result', { pageTitle: '404 Tidak Ditemukan', navTitle: 'Error', results: null, error: 'Halaman yang Anda cari tidak dapat ditemukan (404).', type: 'error' }));

app.use((err, req, res, next) => {
    console.error("Global Error Handler:", err.stack);
    res.status(500).render('result', { pageTitle: '500 Kesalahan Server', navTitle: 'Error', results: null, error: 'Maaf, terjadi kesalahan internal pada server (500). Coba lagi nanti.', type: 'error' });
});

app.listen(PORT, () => console.log(`Server WFC berjalan di port ${PORT}`));